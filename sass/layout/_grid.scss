

/* if the element would render wider than the max-width says
it should be, then the max-width property wins over the width
property. But if it would render less than the max-width says*/
.row {
  max-width:$grid-width; //standard
  // background-color: #eee;
  margin:0 auto;   /*to center block elements inside another block elements*/
  /*margin of left and right is auto, and top and bottom is zero* /
  /*auto for left and right, means that both left and right are the same, so element will be centered*/


  // not psudo class
  // here we select everything except the last-child
  &:not(:last-child) {
    margin-bottom: $gutter-vertical;
    // we want the last row to not have a bottom margin
  }

  @include clear-fix;

  [class^='col-'] {
    // attribute selector
    //selects all the elements which the class attribute starts with a col. This is better
    //than selecting multiple classes
    // background-color: orangered;
    float:left;
    &:not(:last-child) {
        margin-right : $gutter-horizontal;
    }

  }
  .col-1-of-2 {
    width: calc((100% - #{$gutter-horizontal}) / 2);

  }
  .col-1-of-3 {
      width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
  }
  .col-1-of-4 {
    width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
  }
  .col-2-of-3 {
    width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
  }
  .col-2-of-4 {
    width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
  }
  .col-3-of-4 {
    width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
  }
}
